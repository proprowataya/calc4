/***********************************************************
 *
 * Mandelbrot Set Program Written by Calc4
 *
 * This program displays the Mandelbrot set to the console.
 *
 ***********************************************************/

/*****
 * Definitions of constants
 * - In Calc4, we use zero-operand operators as constant values
 *****/

// Operators for fixed-point numbers
// - Calc4 supports only integer types. We regard integers as fixed-point numbers.
D[Shift||65536]
D[toFixed|x|x*{Shift}]  // Convert the given integer to the fixed-point number
D[add|x,y|x+y]
D[sub|x,y|x-y]
D[mult|x,y|x*y/{Shift}]
D[div|x,y|x*{Shift}/y]

// The area in the complex plane where we will compute the Mandelbrot set
D[MinX||(0-2){toFixed}]
D[MaxX||1{toFixed}]
D[MinY||(0-1){toFixed}]
D[MaxY||1{toFixed}]

// Width of the area to be displayed in the console
// - If you wish to get high-definition image, please increase these values
D[CanvasWidthX||110]
D[CanvasWidthY||31]

// If the square of the absolute value exceeds this value, we judge it to be divergent.
D[Inf||4{toFixed}]
D[LoopLimit||1000]

/*****
 * Helpers
 *****/
D[getMax|x,y|x>y?x?y]
D[newline||10P]
D[or|x,y|x == 0 ? (y == 0 ? 0 ? 1) ? 1]

/*****
 *
 * Computation of the Mandelbrot set
 *
 * The computation can be expressed like the following pseudocode.
 *
 * for (var i = 0; i < CanvasWidthX; i++) {
 *     for (var j = 0; j < CanvasWidthY; j++) {
 *         // For each point, determine if it diverges
 *         for (var loop = 0; loop < LoopLimit; loop++) {
 *             if (x * x + y * y > Inf) {
 *                 do something when divergence;
 *                 break;
 *             }
 *
 *             update current status and continue;
 *         }
 *     }
 * }
 *
 * However, Calc4 does not have loops, so we use recursive operators.
 * First, we extract the loop on j to an operator.
 *
 * operator computeX(i) {
 *     if (i < CanvasWidthX) {
 *         computeY(i, 0, a);
 *         return computeX(i + 1); // Tail recursion
 *     }
 *
 *     return 0;
 * }
 *
 * operator computeY(i, j, a) {
 *     for (var j = 0; j < CanvasWidthY; j++) {
 *         ...
 *     }
 * }
 *
 * We perform the same transformations on the inner loops in computeY.
 *
 *****/

// We record the number of iterations until each point diverges in an array.
// The next operator calculates the destination index in the memory.
D[getIndex|i,j|i*({CanvasWidthX}{getMax}{CanvasWidthY})+j]
D[setPoint|i,j,loop|{loop}->(i{getIndex}j)]

// Get the coordinates in the complex plane from the ones in the console
D[getCoordinate|index,min,max,canvasWidth|({index}{toFixed}){mult}({max}{sub}{min}){div}({canvasWidth}{toFixed}){add}{min}]

// Core parts of the computation
D[computePoint|loop,x,y,a,b,i,j|((x{mult}x){add}(y{mult}y)) > {Inf} ?
                                (i{setPoint}j{setPoint}{loop}) ?
                                ({loop} >= {LoopLimit}) ?
                                0 ?
                                (({loop}+1){computePoint}(((x{mult}x){sub}(y{mult}y)){add}a){computePoint}((2{toFixed}{mult}x{mult}y){add}b){computePoint}a{computePoint}b{computePoint}i{computePoint}j)]
D[computeY|i,j,a|j < {CanvasWidthY} ?
                 ((i{setPoint}j{setPoint}{LoopLimit})(0{computePoint}0{computePoint}0{computePoint}a{computePoint}(j{getCoordinate}{MinY}{getCoordinate}{MaxY}{getCoordinate}{CanvasWidthY}){computePoint}i{computePoint}j)(i{computeY}(j+1){computeY}a)) ?
                 0]
D[computeX|i|i < {CanvasWidthX} ?
             (i{computeY}0{computeY}(i{getCoordinate}{MinX}{getCoordinate}{MaxX}{getCoordinate}{CanvasWidthX}))((i+1){computeX}) ?
             0]

/*****
 * Output the result to the console
 *****/
D[getColor|v|(v < (256 - 232))?(255 - v)?232]
D[printIntImpl|n,divisor,printZero|({divisor} != 0)?(((((n / {divisor})S != 0) {or} {printZero}) ? ((48 + L)P) ? 0)((n % {divisor}){printIntImpl}({divisor} / 10){printIntImpl}({printZero}{or}(L!=0))))?0]
D[print|n|n{printIntImpl}1000{printIntImpl}0]
D[printPoint|v|(27P91P52P56P59P53P59P)(v{getColor}{print})(109P32P27P91P48P109P)]
D[printX|i,j|i<{CanvasWidthX}?(((i{getIndex}j)@{printPoint})((i+1){printX}j))?(10P)]
D[printY|j|j<{CanvasWidthY}?((0{printX}j)((j+1){printY}))?0]

/*****
 * We have completed the definitions of the required operators.
 * Start the program by calling them.
 *****/
0{computeX}
0{printY}
